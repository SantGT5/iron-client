{"ast":null,"code":"import axios from \"axios\";\nconst apis = {\n  development: \"http://localhost:3000/api\",\n  production: \"\"\n}; // Pré-configurando a URL padrão do nosso backend em uma instância do Axios\n\nconst api = axios.create({\n  baseURL: apis[process.env.NODE_ENV]\n}); // Configura a instância do Axios para injetar o cabeçalho de autenticação antes de cada requisição\n\napi.interceptors.request.use(config => {\n  // Verifica se já temos as informações do usuário logado no localStorage\n  const storedUser = localStorage.getItem(\"loggedInUser\");\n  const loggedInUser = JSON.parse(storedUser || '\"\"');\n\n  if (loggedInUser.token) {\n    config.headers = {\n      Authorization: `Bearer ${loggedInUser.token}`\n    };\n  }\n\n  return config;\n});\nexport default api;","map":{"version":3,"sources":["/Users/gianlucas/Documents/GitProjects/VSCodes/LabsIronHack/GianClient/iron-client/src/apis/api.js"],"names":["axios","apis","development","production","api","create","baseURL","process","env","NODE_ENV","interceptors","request","use","config","storedUser","localStorage","getItem","loggedInUser","JSON","parse","token","headers","Authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,WAAW,EAAE,2BADF;AAEXC,EAAAA,UAAU,EAAE;AAFD,CAAb,C,CAKA;;AACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAEL,IAAI,CAACM,OAAO,CAACC,GAAR,CAAYC,QAAb;AADU,CAAb,CAAZ,C,CAIA;;AACAL,GAAG,CAACM,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA8BC,MAAD,IAAY;AACvC;AACA,QAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;AAEA,QAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAU,IAAI,IAAzB,CAArB;;AAEA,MAAIG,YAAY,CAACG,KAAjB,EAAwB;AACtBP,IAAAA,MAAM,CAACQ,OAAP,GAAiB;AACfC,MAAAA,aAAa,EAAG,UAASL,YAAY,CAACG,KAAM;AAD7B,KAAjB;AAGD;;AAED,SAAOP,MAAP;AACD,CAbD;AAeA,eAAeT,GAAf","sourcesContent":["import axios from \"axios\";\n\nconst apis = {\n  development: \"http://localhost:3000/api\",\n  production: \"\",\n};\n\n// Pré-configurando a URL padrão do nosso backend em uma instância do Axios\nconst api = axios.create({\n  baseURL: apis[process.env.NODE_ENV],\n});\n\n// Configura a instância do Axios para injetar o cabeçalho de autenticação antes de cada requisição\napi.interceptors.request.use((config) => {\n  // Verifica se já temos as informações do usuário logado no localStorage\n  const storedUser = localStorage.getItem(\"loggedInUser\");\n\n  const loggedInUser = JSON.parse(storedUser || '\"\"');\n\n  if (loggedInUser.token) {\n    config.headers = {\n      Authorization: `Bearer ${loggedInUser.token}`,\n    };\n  }\n\n  return config;\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}